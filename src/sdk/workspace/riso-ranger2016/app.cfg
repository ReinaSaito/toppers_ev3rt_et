INCLUDE("app_common.cfg");

#include "app.h"

DOMAIN(TDOM_APP) {
INCLUDE("ced_kernel_cfg.h");

// タスク //
// CRE_TSK(ID tskid：タスクID, {ATR tskatr：タスク属性, intptr_t exinf：拡張情報 , TASK task：起動番地, PRI itskpri：起動時優先度, SIZE stksz：ｽﾀｯｸｻｲｽﾞ[Byte], VP stk：ｽﾀｯｸ先頭番地});
CRE_TSK(ID_TASK_MAIN,{TA_ACT, 0x00000000, TaskMain, 15, 4096, NULL });
CRE_TSK(ID_TASK_INTERRUPT_PROC,{TA_NULL, 0x00000000, TaskInterruptProc, 4, 4096, NULL });
CRE_TSK(ID_TASK_ENGINE,{TA_NULL, 0x00000000, TaskEngine, 10, 8192, NULL });
CRE_TSK(ID_TASK_COMMUNICATION,{TA_NULL, 0x00000000, TaskCommunication, 8, 4096, NULL });
CRE_TSK(ID_TASK_LONG_TERM_OPERATION,{TA_NULL, 0x00000000, TaskLongTermOperation, 12, 4096, NULL });
CRE_TSK(ID_TASK_SHORT_CYCLE_OPERATION,{TA_NULL, 0x00000000, TaskShortCycleOperation, 2, 4096, NULL });
CRE_TSK(ID_TASK_DEBUG_MONITORING,{TA_NULL, 0x00000000, TaskDebugMonitoring, 12, 4096, NULL });

// セマフォ //
// CRE_SEM(ID semid：セマフォID, {ATR sematr：属性,  UINT isemcnt：資源数の初期値,  UINT maxsem：最大資源数});
// イベントフラグ //
// CRE_FLG(ID flgid：イベントフラグID, ATR flgatr：属性 , FLGPTN iflgptn：ﾋﾞｯﾄﾊﾟﾀｰﾝの初期値});
CRE_FLG(ID_EFLG_SHORT_TERM_OPERATION, {TA_NULL, 0x00000000});
// データキュー //
// CRE_DTQ(ID dtqid：データキューID, {ATR dtqatr：属性, UINT dtqcnt：領域の容量(データの個数) , VP dtq：領域の先頭番地});
CRE_DTQ(ID_MSG_BOX_INTERRUPT_PROC, {TA_NULL, 0x00000064, NULL});
CRE_DTQ(ID_MSG_BOX_ENGINE, {TA_NULL, 0x00000064, NULL});
CRE_DTQ(ID_MSG_BOX_COMMUNICATION, {TA_NULL, 0x00000064, NULL});
CRE_DTQ(ID_MSG_BOX_LONG_TERM_OPERATION, {TA_NULL, 0x00000064, NULL});
CRE_DTQ(ID_MSG_BOX_SHORT_CYCLE_OPERATION, {TA_NULL, 0x00000064, NULL});
// メールボックス //
// CRE_MBX(ID mbxid：メールボックスID, {ATR mbxatr：属性 , PRI maxmpri：ﾒｯｾｰｼﾞ優先度の最大値, VP mbrihd：優先度別のﾒｯｾｰｼﾞｷｭｰﾍｯﾀﾞ領域の先頭番地 });
// ミューテックス //
// CRE_MTX(ID mtxid：ミューテックスID, {ATR mtxatr：属性 , PRI ceilpri：上限優先度});
// メッセージバッファ //
// CRE_MBF(ID mbfid：メッセージバッファID, {ATR mbfatr：属性, UINT maxmsz：ﾒｯｾｰｼﾞの最大ｻｲｽﾞ[BYTE], SIZE mbfsz：領域ｻｲｽﾞ[BYTE], VP mbf：ﾒｯｾｰｼﾞﾊﾞｯﾌｧ領域の先頭番地});
// 固定長メモリプール //
// CRE_MPF(ID mpfid：固定長メモリプールID, {ATR mpfatr：属性 , UINT blkcnt：獲得できるﾒﾓﾘﾌﾞﾛｯｸ数(個数), UINT blksz：ﾒﾓﾘﾌﾞﾛｯｸのｻｲｽﾞ[BYTE]});
// 可変長メモリプール //
// CRE_MPL(ID mplid：可変長メモリプールID, {ATR mplatr：属性, SIZE mplsz：領域ｻｲｽﾞ[BYTE], VP mpl：可変長ﾒﾓﾘﾌﾟｰﾙ領域の先頭番地 });
// 周期ハンドラ //
// CRE_CYC(ID cycid：周期ハンドラID, {ATR cycatr：属性, VP_INT exinf：拡張情報, FP cychdr：周期ﾊﾝﾄﾞﾗの起動番地, RELTIM cyctim：周期ﾊﾝﾄﾞﾗの起動周期, RELTIM cycphs： 周期ﾊﾝﾄﾞﾗの起動位相});
// 割り込みハンドラ //
// DEF_INH(INHNO inhno：割込みハンドラ番号 , {ATR inhatr：属性, FP inthdr：割込みﾊﾝﾄﾞﾗの起動番地});
// 例外ハンドラ //
// DEF_EXC(EXCNO excno：CPU例外ハンドラ番号, {ATR excatr：CPU 例外ﾊﾝﾄﾞﾗ属性, FP exchdr：CPU 例外ﾊﾝﾄﾞﾗの起動番地});
// 初期化ルーチン //
// ATT_INI(ATR iniatr：属性, {VP_INT exinf：拡張情報 , FP inirtn：初期化ﾙｰﾁﾝの起動番地});
// タスク例外処理定義 //
}

ATT_MOD("app.o");



